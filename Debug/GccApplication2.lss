
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000362  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000003fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000971  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f8  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000288  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a4 e0       	ldi	r26, 0x04	; 4
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e2 e6       	ldi	r30, 0x62	; 98
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <blinkRandomDelay>:
#include <util/delay.h>
#include <avr/io.h>
//#include <stdlib.h>
int delayIndex;
void blinkRandomDelay(){
	delayIndex = rand(5);
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 3c 01 	call	0x278	; 0x278 <rand>
  ae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
  b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	switch(delayIndex){
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	91 05       	cpc	r25, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <blinkRandomDelay+0x18>
  bc:	40 c0       	rjmp	.+128    	; 0x13e <blinkRandomDelay+0x98>
  be:	2c f4       	brge	.+10     	; 0xca <blinkRandomDelay+0x24>
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	59 f0       	breq	.+22     	; 0xda <blinkRandomDelay+0x34>
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	11 f1       	breq	.+68     	; 0x10c <blinkRandomDelay+0x66>
  c8:	08 95       	ret
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <blinkRandomDelay+0x2c>
  d0:	4f c0       	rjmp	.+158    	; 0x170 <blinkRandomDelay+0xca>
  d2:	04 97       	sbiw	r24, 0x04	; 4
  d4:	09 f4       	brne	.+2      	; 0xd8 <blinkRandomDelay+0x32>
  d6:	65 c0       	rjmp	.+202    	; 0x1a2 <blinkRandomDelay+0xfc>
  d8:	08 95       	ret
		case 0:
			PORTB |= 0B00100000;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	85 ea       	ldi	r24, 0xA5	; 165
  e4:	9e e0       	ldi	r25, 0x0E	; 14
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <blinkRandomDelay+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <blinkRandomDelay+0x4a>
  f0:	00 00       	nop
			_delay_ms(300);
			PORTB &= ~0B00100000;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	85 ea       	ldi	r24, 0xA5	; 165
  fc:	9e e0       	ldi	r25, 0x0E	; 14
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <blinkRandomDelay+0x58>
 106:	00 c0       	rjmp	.+0      	; 0x108 <blinkRandomDelay+0x62>
 108:	00 00       	nop
 10a:	08 95       	ret
			_delay_ms(300);
			break;
		case 1:
			PORTB |= 0B00100000;
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	85 b9       	out	0x05, r24	; 5
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 e6       	ldi	r24, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <blinkRandomDelay+0x72>
 120:	00 c0       	rjmp	.+0      	; 0x122 <blinkRandomDelay+0x7c>
 122:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~0B00100000;
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	85 b9       	out	0x05, r24	; 5
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	89 e6       	ldi	r24, 0x69	; 105
 12e:	98 e1       	ldi	r25, 0x18	; 24
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <blinkRandomDelay+0x8a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <blinkRandomDelay+0x94>
 13a:	00 00       	nop
 13c:	08 95       	ret
			_delay_ms(500);
			break;
		case 2:
			PORTB |= 0B00100000;
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	80 62       	ori	r24, 0x20	; 32
 142:	85 b9       	out	0x05, r24	; 5
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	8d e2       	ldi	r24, 0x2D	; 45
 148:	92 e2       	ldi	r25, 0x22	; 34
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <blinkRandomDelay+0xa4>
 152:	00 c0       	rjmp	.+0      	; 0x154 <blinkRandomDelay+0xae>
 154:	00 00       	nop
			_delay_ms(700);
			PORTB &= ~0B00100000;
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	8d e2       	ldi	r24, 0x2D	; 45
 160:	92 e2       	ldi	r25, 0x22	; 34
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <blinkRandomDelay+0xbc>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <blinkRandomDelay+0xc6>
 16c:	00 00       	nop
 16e:	08 95       	ret
			_delay_ms(700);
			break;
		case 3:
			PORTB |= 0B00100000;
 170:	85 b1       	in	r24, 0x05	; 5
 172:	80 62       	ori	r24, 0x20	; 32
 174:	85 b9       	out	0x05, r24	; 5
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	81 ef       	ldi	r24, 0xF1	; 241
 17a:	9b e2       	ldi	r25, 0x2B	; 43
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <blinkRandomDelay+0xd6>
 184:	00 c0       	rjmp	.+0      	; 0x186 <blinkRandomDelay+0xe0>
 186:	00 00       	nop
			_delay_ms(900);
			PORTB &= ~0B00100000;
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	81 ef       	ldi	r24, 0xF1	; 241
 192:	9b e2       	ldi	r25, 0x2B	; 43
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <blinkRandomDelay+0xee>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <blinkRandomDelay+0xf8>
 19e:	00 00       	nop
 1a0:	08 95       	ret
			_delay_ms(900);
			break;
		case 4:
			PORTB |= 0B00100000;
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	85 eb       	ldi	r24, 0xB5	; 181
 1ac:	95 e3       	ldi	r25, 0x35	; 53
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <blinkRandomDelay+0x108>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <blinkRandomDelay+0x112>
 1b8:	00 00       	nop
			_delay_ms(1100);
			PORTB &= ~0B00100000;
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	85 eb       	ldi	r24, 0xB5	; 181
 1c4:	95 e3       	ldi	r25, 0x35	; 53
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <blinkRandomDelay+0x120>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <blinkRandomDelay+0x12a>
 1d0:	00 00       	nop
 1d2:	08 95       	ret

000001d4 <main>:
	}
}

int main(void)
{
	DDRB |= 0b00100000;
 1d4:	84 b1       	in	r24, 0x04	; 4
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	84 b9       	out	0x04, r24	; 4
    /* Replace with your application code */
    while (1) 
    {
		blinkRandomDelay();
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <blinkRandomDelay>
 1de:	fd cf       	rjmp	.-6      	; 0x1da <main+0x6>

000001e0 <do_rand>:
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
 1f6:	68 81       	ld	r22, Y
 1f8:	79 81       	ldd	r23, Y+1	; 0x01
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	9b 81       	ldd	r25, Y+3	; 0x03
 1fe:	61 15       	cp	r22, r1
 200:	71 05       	cpc	r23, r1
 202:	81 05       	cpc	r24, r1
 204:	91 05       	cpc	r25, r1
 206:	21 f4       	brne	.+8      	; 0x210 <do_rand+0x30>
 208:	64 e2       	ldi	r22, 0x24	; 36
 20a:	79 ed       	ldi	r23, 0xD9	; 217
 20c:	8b e5       	ldi	r24, 0x5B	; 91
 20e:	97 e0       	ldi	r25, 0x07	; 7
 210:	2d e1       	ldi	r18, 0x1D	; 29
 212:	33 ef       	ldi	r19, 0xF3	; 243
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0e 94 4c 01 	call	0x298	; 0x298 <__divmodsi4>
 21c:	49 01       	movw	r8, r18
 21e:	5a 01       	movw	r10, r20
 220:	9b 01       	movw	r18, r22
 222:	ac 01       	movw	r20, r24
 224:	a7 ea       	ldi	r26, 0xA7	; 167
 226:	b1 e4       	ldi	r27, 0x41	; 65
 228:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__muluhisi3>
 22c:	6b 01       	movw	r12, r22
 22e:	7c 01       	movw	r14, r24
 230:	ac ee       	ldi	r26, 0xEC	; 236
 232:	b4 ef       	ldi	r27, 0xF4	; 244
 234:	a5 01       	movw	r20, r10
 236:	94 01       	movw	r18, r8
 238:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__mulohisi3>
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	8c 0d       	add	r24, r12
 242:	9d 1d       	adc	r25, r13
 244:	ae 1d       	adc	r26, r14
 246:	bf 1d       	adc	r27, r15
 248:	b7 ff       	sbrs	r27, 7
 24a:	03 c0       	rjmp	.+6      	; 0x252 <do_rand+0x72>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	a1 09       	sbc	r26, r1
 250:	b0 48       	sbci	r27, 0x80	; 128
 252:	88 83       	st	Y, r24
 254:	99 83       	std	Y+1, r25	; 0x01
 256:	aa 83       	std	Y+2, r26	; 0x02
 258:	bb 83       	std	Y+3, r27	; 0x03
 25a:	9f 77       	andi	r25, 0x7F	; 127
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	9f 90       	pop	r9
 26e:	8f 90       	pop	r8
 270:	08 95       	ret

00000272 <rand_r>:
 272:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <do_rand>
 276:	08 95       	ret

00000278 <rand>:
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <do_rand>
 280:	08 95       	ret

00000282 <srand>:
 282:	a0 e0       	ldi	r26, 0x00	; 0
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 28a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 292:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 296:	08 95       	ret

00000298 <__divmodsi4>:
 298:	05 2e       	mov	r0, r21
 29a:	97 fb       	bst	r25, 7
 29c:	1e f4       	brtc	.+6      	; 0x2a4 <__divmodsi4+0xc>
 29e:	00 94       	com	r0
 2a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__negsi2>
 2a4:	57 fd       	sbrc	r21, 7
 2a6:	07 d0       	rcall	.+14     	; 0x2b6 <__divmodsi4_neg2>
 2a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 2ac:	07 fc       	sbrc	r0, 7
 2ae:	03 d0       	rcall	.+6      	; 0x2b6 <__divmodsi4_neg2>
 2b0:	4e f4       	brtc	.+18     	; 0x2c4 <__divmodsi4_exit>
 2b2:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__negsi2>

000002b6 <__divmodsi4_neg2>:
 2b6:	50 95       	com	r21
 2b8:	40 95       	com	r20
 2ba:	30 95       	com	r19
 2bc:	21 95       	neg	r18
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	4f 4f       	sbci	r20, 0xFF	; 255
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255

000002c4 <__divmodsi4_exit>:
 2c4:	08 95       	ret

000002c6 <__negsi2>:
 2c6:	90 95       	com	r25
 2c8:	80 95       	com	r24
 2ca:	70 95       	com	r23
 2cc:	61 95       	neg	r22
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	8f 4f       	sbci	r24, 0xFF	; 255
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__muluhisi3>:
 2d6:	0e 94 a0 01 	call	0x340	; 0x340 <__umulhisi3>
 2da:	a5 9f       	mul	r26, r21
 2dc:	90 0d       	add	r25, r0
 2de:	b4 9f       	mul	r27, r20
 2e0:	90 0d       	add	r25, r0
 2e2:	a4 9f       	mul	r26, r20
 2e4:	80 0d       	add	r24, r0
 2e6:	91 1d       	adc	r25, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	08 95       	ret

000002ec <__mulshisi3>:
 2ec:	b7 ff       	sbrs	r27, 7
 2ee:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__muluhisi3>

000002f2 <__mulohisi3>:
 2f2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__muluhisi3>
 2f6:	82 1b       	sub	r24, r18
 2f8:	93 0b       	sbc	r25, r19
 2fa:	08 95       	ret

000002fc <__udivmodsi4>:
 2fc:	a1 e2       	ldi	r26, 0x21	; 33
 2fe:	1a 2e       	mov	r1, r26
 300:	aa 1b       	sub	r26, r26
 302:	bb 1b       	sub	r27, r27
 304:	fd 01       	movw	r30, r26
 306:	0d c0       	rjmp	.+26     	; 0x322 <__udivmodsi4_ep>

00000308 <__udivmodsi4_loop>:
 308:	aa 1f       	adc	r26, r26
 30a:	bb 1f       	adc	r27, r27
 30c:	ee 1f       	adc	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	a2 17       	cp	r26, r18
 312:	b3 07       	cpc	r27, r19
 314:	e4 07       	cpc	r30, r20
 316:	f5 07       	cpc	r31, r21
 318:	20 f0       	brcs	.+8      	; 0x322 <__udivmodsi4_ep>
 31a:	a2 1b       	sub	r26, r18
 31c:	b3 0b       	sbc	r27, r19
 31e:	e4 0b       	sbc	r30, r20
 320:	f5 0b       	sbc	r31, r21

00000322 <__udivmodsi4_ep>:
 322:	66 1f       	adc	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	1a 94       	dec	r1
 32c:	69 f7       	brne	.-38     	; 0x308 <__udivmodsi4_loop>
 32e:	60 95       	com	r22
 330:	70 95       	com	r23
 332:	80 95       	com	r24
 334:	90 95       	com	r25
 336:	9b 01       	movw	r18, r22
 338:	ac 01       	movw	r20, r24
 33a:	bd 01       	movw	r22, r26
 33c:	cf 01       	movw	r24, r30
 33e:	08 95       	ret

00000340 <__umulhisi3>:
 340:	a2 9f       	mul	r26, r18
 342:	b0 01       	movw	r22, r0
 344:	b3 9f       	mul	r27, r19
 346:	c0 01       	movw	r24, r0
 348:	a3 9f       	mul	r26, r19
 34a:	70 0d       	add	r23, r0
 34c:	81 1d       	adc	r24, r1
 34e:	11 24       	eor	r1, r1
 350:	91 1d       	adc	r25, r1
 352:	b2 9f       	mul	r27, r18
 354:	70 0d       	add	r23, r0
 356:	81 1d       	adc	r24, r1
 358:	11 24       	eor	r1, r1
 35a:	91 1d       	adc	r25, r1
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
